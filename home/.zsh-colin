export ALTERNATE_EDITOR=emacs EDITOR=emacsclient VISUAL=emacsclient

HISTSIZE=50000
SAVEHIST=100000
DIRSTACKSIZE=10

# If this is set, zsh sessions will append their history list to
# the history file, rather than overwrite it. Thus, multiple parallel
# zsh sessions will all have their history lists added to the
# history file, in the order they are killed
setopt append_history

# invoke this every time when u change .zshrc to recompile it.
function src ()
{
	autoload -U zrecompile
	[ -f ~/.zshrc ] && zrecompile -p ~/.zshrc
	[ -f ~/.zcompdump ] && zrecompile -p ~/.zcompdump
	[ -f ~/.zshrc.zwc.old ] && rm -f ~/.zshrc.zwc.old
	[ -f ~/.zcompdump.zwc.old ] && rm -f ~/.zcompdump.zwc.old
	source ~/.zshrc
}

# emacs editing
bindkey -e

# # colorful listings
# zmodload -i zsh/complist
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# zstyle ':completion:*' file-patterns '%p:globbed-files' '*(-/):directories' '*:all-files'

# # start menu completion only if it could find no unambiguous initial string
# zstyle ':completion:*:correct:*'       insert-unambiguous true

# # complete 'cd -<tab>' with menu
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select

# # activate menu selection
# #zstyle ':completion:*' menu #no=5 #select=long

alias l="ls --color=auto -lstr"
alias la="ls --color=auto -lstra"

# Customize to your needs...
export PATH=$HOME/bin:$HOME/bin/sublime:$HOME/.rvm/bin:/var/lib/gems/1.8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

# This loads RVM into a shell session.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

emacsat () {
	foo=("${(s/:/)1}")
	em +$foo[2] $foo[1]
}

# edit files as root in emacs (http://emacs-fu.blogspot.com/2011/12/system-administration-with-emacs.html)
alias E="SUDO_EDITOR=\"emacsclient \" sudoedit"
alias em="emacsclient -n"

alias 2z="cd /home/colin/Zoogle/zooglerails"
alias 2p="cd /home/colin/Projects"

rbfind() { find . -name '*rb' -exec grep -l $*  {} \; }
rbshow() { find . -name '*rb' -exec grep $*  {} \; }
jsfind() { find . -name '*js' -exec grep -l $*  {} \; }

tabs 4

function try_connect_ssh() {
    if $(echo "$1" | grep -q '^ssh://') ; then
        DEST=$(echo "$1" | cut -c7-)
        ssh $DEST
        return 0
    else
        return 1
    fi
}

function preexec() {
 __last_command=$1
}

trap '
 set -- ${=__last_command}
 ssh=${~1}
 try_connect_ssh "$ssh" || return 1
' ZERR
